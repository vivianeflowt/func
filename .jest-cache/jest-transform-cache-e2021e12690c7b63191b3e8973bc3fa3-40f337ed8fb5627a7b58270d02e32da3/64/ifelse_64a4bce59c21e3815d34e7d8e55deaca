762e134f8a9117944cf96b3aed6657ac
"use strict";

/* istanbul ignore next */
function cov_8bf3upri6() {
  var path = "/media/vivi/gurudavivi/PIXY/pixy-fn/src/lib/if-else.ts";
  var hash = "43f1043e601453cec868d0f036a48953db9bc055";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/media/vivi/gurudavivi/PIXY/pixy-fn/src/lib/if-else.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 4,
          column: 13
        },
        end: {
          line: 4,
          column: 33
        }
      },
      "3": {
        start: {
          line: 5,
          column: 13
        },
        end: {
          line: 5,
          column: 33
        }
      },
      "4": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "5": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "6": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "8": {
        start: {
          line: 15,
          column: 54
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "9": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "10": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "ifElse",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 15
          }
        },
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 12
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 19
          }
        },
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 26
          }
        },
        loc: {
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 15,
            column: 45
          }
        },
        loc: {
          start: {
            line: 15,
            column: 54
          },
          end: {
            line: 15,
            column: 69
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 14
          },
          end: {
            line: 16,
            column: 26
          }
        }, {
          start: {
            line: 17,
            column: 14
          },
          end: {
            line: 17,
            column: 26
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "43f1043e601453cec868d0f036a48953db9bc055"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8bf3upri6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_8bf3upri6();
cov_8bf3upri6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_8bf3upri6().s[1]++;
exports.ifElse = void 0;
const fp_1 =
/* istanbul ignore next */
(cov_8bf3upri6().s[2]++, require("lodash/fp"));
const fp_2 =
/* istanbul ignore next */
(cov_8bf3upri6().s[3]++, require("lodash/fp"));
/**
 * Description placeholder
 * @category Comparability
 * @template T
 * @param {...PredicateComparator[]} args
 * @returns {(a: any) => (b: any) => (predicade: T) => T}
 */

function ifElse(...args) {
  /* istanbul ignore next */
  cov_8bf3upri6().f[0]++;
  cov_8bf3upri6().s[4]++;
  return (a) => {
    /* istanbul ignore next */
    cov_8bf3upri6().f[1]++;
    cov_8bf3upri6().s[5]++;
    return (b) => {
      /* istanbul ignore next */
      cov_8bf3upri6().f[2]++;
      cov_8bf3upri6().s[6]++;
      return (predicade) => {
        /* istanbul ignore next */
        cov_8bf3upri6().f[3]++;
        cov_8bf3upri6().s[7]++;
        return (0, fp_2.pipe)((0, fp_1.map)((cond) => {
          /* istanbul ignore next */
          cov_8bf3upri6().f[4]++;
          cov_8bf3upri6().s[8]++;
          return cond(predicade);
        }), (0, fp_1.every)((0, fp_1.eq)(true)))(args) ?
        /* istanbul ignore next */
        (cov_8bf3upri6().b[0][0]++, a(predicade)) :
        /* istanbul ignore next */
        (cov_8bf3upri6().b[0][1]++, b(predicade));
      };
    };
  };
}

/* istanbul ignore next */
cov_8bf3upri6().s[9]++;
exports.ifElse = ifElse;

/* istanbul ignore next */
cov_8bf3upri6().s[10]++;
exports.default = ifElse;